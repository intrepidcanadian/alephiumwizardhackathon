/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Address,
  Contract,
  ContractState,
  TestContractResult,
  HexString,
  ContractFactory,
  EventSubscribeOptions,
  EventSubscription,
  CallContractParams,
  CallContractResult,
  TestContractParams,
  ContractEvent,
  subscribeContractEvent,
  subscribeContractEvents,
  testMethod,
  callMethod,
  multicallMethods,
  fetchContractState,
  Asset,
  ContractInstance,
  getContractEventsCurrentCount,
  TestContractParamsWithoutMaps,
  TestContractResultWithoutMaps,
  SignExecuteContractMethodParams,
  SignExecuteScriptTxResult,
  signExecuteMethod,
  addStdIdToFields,
  encodeContractFields,
} from "@alephium/web3";
import { default as OracleConsumerContractJson } from "../OracleConsumer.ral.json";
import { getContractByCodeHash } from "./contracts";
import { DIAOracleValue, AllStructs } from "./types";

// Custom types for the contract
export namespace OracleConsumerTypes {
  export type Fields = {
    oracle: HexString;
    lastPrice: bigint;
    lastTimestamp: bigint;
    message: HexString;
  };

  export type State = ContractState<Fields>;

  export interface CallMethodTable {
    getAlphPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<null>;
    };
    getLastPrice: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getLastTimestamp: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
    getMessage: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<HexString>;
    };
    getLastPriceInCents: {
      params: Omit<CallContractParams<{}>, "args">;
      result: CallContractResult<bigint>;
    };
  }
  export type CallMethodParams<T extends keyof CallMethodTable> =
    CallMethodTable[T]["params"];
  export type CallMethodResult<T extends keyof CallMethodTable> =
    CallMethodTable[T]["result"];
  export type MultiCallParams = Partial<{
    [Name in keyof CallMethodTable]: CallMethodTable[Name]["params"];
  }>;
  export type MultiCallResults<T extends MultiCallParams> = {
    [MaybeName in keyof T]: MaybeName extends keyof CallMethodTable
      ? CallMethodTable[MaybeName]["result"]
      : undefined;
  };
  export type MulticallReturnType<Callss extends MultiCallParams[]> = {
    [index in keyof Callss]: MultiCallResults<Callss[index]>;
  };

  export interface SignExecuteMethodTable {
    getAlphPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLastPrice: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLastTimestamp: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getMessage: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
    getLastPriceInCents: {
      params: Omit<SignExecuteContractMethodParams<{}>, "args">;
      result: SignExecuteScriptTxResult;
    };
  }
  export type SignExecuteMethodParams<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["params"];
  export type SignExecuteMethodResult<T extends keyof SignExecuteMethodTable> =
    SignExecuteMethodTable[T]["result"];
}

class Factory extends ContractFactory<
  OracleConsumerInstance,
  OracleConsumerTypes.Fields
> {
  encodeFields(fields: OracleConsumerTypes.Fields) {
    return encodeContractFields(
      addStdIdToFields(this.contract, fields),
      this.contract.fieldsSig,
      AllStructs
    );
  }

  at(address: string): OracleConsumerInstance {
    return new OracleConsumerInstance(address);
  }

  tests = {
    getAlphPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<OracleConsumerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<null>> => {
      return testMethod(this, "getAlphPrice", params, getContractByCodeHash);
    },
    getLastPrice: async (
      params: Omit<
        TestContractParamsWithoutMaps<OracleConsumerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(this, "getLastPrice", params, getContractByCodeHash);
    },
    getLastTimestamp: async (
      params: Omit<
        TestContractParamsWithoutMaps<OracleConsumerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getLastTimestamp",
        params,
        getContractByCodeHash
      );
    },
    getMessage: async (
      params: Omit<
        TestContractParamsWithoutMaps<OracleConsumerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<HexString>> => {
      return testMethod(this, "getMessage", params, getContractByCodeHash);
    },
    getLastPriceInCents: async (
      params: Omit<
        TestContractParamsWithoutMaps<OracleConsumerTypes.Fields, never>,
        "testArgs"
      >
    ): Promise<TestContractResultWithoutMaps<bigint>> => {
      return testMethod(
        this,
        "getLastPriceInCents",
        params,
        getContractByCodeHash
      );
    },
  };

  stateForTest(
    initFields: OracleConsumerTypes.Fields,
    asset?: Asset,
    address?: string
  ) {
    return this.stateForTest_(initFields, asset, address, undefined);
  }
}

// Use this object to test and deploy the contract
export const OracleConsumer = new Factory(
  Contract.fromJson(
    OracleConsumerContractJson,
    "",
    "2de55e6a8883d50b84fa979c6697adec61d6451f61070716fbd9131ccc439329",
    AllStructs
  )
);

// Use this class to interact with the blockchain
export class OracleConsumerInstance extends ContractInstance {
  constructor(address: Address) {
    super(address);
  }

  async fetchState(): Promise<OracleConsumerTypes.State> {
    return fetchContractState(OracleConsumer, this);
  }

  view = {
    getAlphPrice: async (
      params?: OracleConsumerTypes.CallMethodParams<"getAlphPrice">
    ): Promise<OracleConsumerTypes.CallMethodResult<"getAlphPrice">> => {
      return callMethod(
        OracleConsumer,
        this,
        "getAlphPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLastPrice: async (
      params?: OracleConsumerTypes.CallMethodParams<"getLastPrice">
    ): Promise<OracleConsumerTypes.CallMethodResult<"getLastPrice">> => {
      return callMethod(
        OracleConsumer,
        this,
        "getLastPrice",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLastTimestamp: async (
      params?: OracleConsumerTypes.CallMethodParams<"getLastTimestamp">
    ): Promise<OracleConsumerTypes.CallMethodResult<"getLastTimestamp">> => {
      return callMethod(
        OracleConsumer,
        this,
        "getLastTimestamp",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getMessage: async (
      params?: OracleConsumerTypes.CallMethodParams<"getMessage">
    ): Promise<OracleConsumerTypes.CallMethodResult<"getMessage">> => {
      return callMethod(
        OracleConsumer,
        this,
        "getMessage",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
    getLastPriceInCents: async (
      params?: OracleConsumerTypes.CallMethodParams<"getLastPriceInCents">
    ): Promise<OracleConsumerTypes.CallMethodResult<"getLastPriceInCents">> => {
      return callMethod(
        OracleConsumer,
        this,
        "getLastPriceInCents",
        params === undefined ? {} : params,
        getContractByCodeHash
      );
    },
  };

  transact = {
    getAlphPrice: async (
      params: OracleConsumerTypes.SignExecuteMethodParams<"getAlphPrice">
    ): Promise<OracleConsumerTypes.SignExecuteMethodResult<"getAlphPrice">> => {
      return signExecuteMethod(OracleConsumer, this, "getAlphPrice", params);
    },
    getLastPrice: async (
      params: OracleConsumerTypes.SignExecuteMethodParams<"getLastPrice">
    ): Promise<OracleConsumerTypes.SignExecuteMethodResult<"getLastPrice">> => {
      return signExecuteMethod(OracleConsumer, this, "getLastPrice", params);
    },
    getLastTimestamp: async (
      params: OracleConsumerTypes.SignExecuteMethodParams<"getLastTimestamp">
    ): Promise<
      OracleConsumerTypes.SignExecuteMethodResult<"getLastTimestamp">
    > => {
      return signExecuteMethod(
        OracleConsumer,
        this,
        "getLastTimestamp",
        params
      );
    },
    getMessage: async (
      params: OracleConsumerTypes.SignExecuteMethodParams<"getMessage">
    ): Promise<OracleConsumerTypes.SignExecuteMethodResult<"getMessage">> => {
      return signExecuteMethod(OracleConsumer, this, "getMessage", params);
    },
    getLastPriceInCents: async (
      params: OracleConsumerTypes.SignExecuteMethodParams<"getLastPriceInCents">
    ): Promise<
      OracleConsumerTypes.SignExecuteMethodResult<"getLastPriceInCents">
    > => {
      return signExecuteMethod(
        OracleConsumer,
        this,
        "getLastPriceInCents",
        params
      );
    },
  };

  async multicall<Callss extends OracleConsumerTypes.MultiCallParams[]>(
    ...callss: Callss
  ): Promise<OracleConsumerTypes.MulticallReturnType<Callss>> {
    return (await multicallMethods(
      OracleConsumer,
      this,
      callss,
      getContractByCodeHash
    )) as OracleConsumerTypes.MulticallReturnType<Callss>;
  }
}
